1. Section Overview: I/O and stream
Streams and I/O
Stream manipulators
Reading and writing to a text file
Using string streams

2. Files, streams and IO
C++ uses stream as an interface between the program and input and output
devices
Independent of the actual device
Sequence of bytes
Input stream provides data to the program
Output stream recives data from program

Common header files

iostream Provides definitions for formated input and output from/to streams
fstream Provides definitions for formated input and output from/to file
streams
iomanip Provides definitions for manipulatiors used to format stream I/o

ios provides basic support for formatted  and unformatted I/O operations. Base
class most other classes
ifstream provides for high-level input operations on file based streams
ofstream Provides for high-level output operations on file based streams
fstream Provides for high-level I/O operations on file based streams. Derived
from ofstream and ifstream
stringstream Provides for high-level I/O operations on memory based strings.
Derived from istringstream and ostringstream.

Global stream objects
cin Standard input stream (instance of istream) keboard
cout Standard output stream (instance of ostream) console
cerr Standard error stream (instance of osstream - unbuffered) console
clog Standard log stream (instance of ostream - unbuffered) console

Global objects - initialized before main executes
Best practice is to use cerr for error messgaes and clog for log messages.

3. Stream manipulators
Streams have useful member functions to control formatting
Can be used on input and output streams
The time of the effect on the stream varied
Can be used as member functions or as a manipulato
std::cout.width(); // member function
std::cout << std::setw(10); //manipulator
we will focus on manipulator usage

Common stream manipulators
Boolean: boolalpha, noboolalpha
Interger: dec, hex, oct, showbase, showpos, noshowbas, noshowpos, uppercase,
nouppercase
Floating point: fixed, scientific, setprecision, showpoint, noshowpoint,
showpos, noshowpos
Field width, justification and fill: setw, left, right, internal, setfill
Others: endl, flush, skipws, ws

4. Formatting boolean types
All further boolean output will be affected
std::cout << std::noboolalpha; // 1 or 0
std::cout << std::boolalpha; // true or false

Method version
std::cout.setf(std::ios::boolalpha);
std::cout.setf(std::ios::noboolalpha);
Reset to default
std::cout << std::resetioflags(std::ios::boolalpha);

5. Formatting integer types
Default when displaying integer values is:
dec (base 10)
noshowbase - prefix used to show hexadecimal or actal
nouppercase - when displaying a prefix and hex values it will be lower case
noshowpos - no + is displayed for positive numbers

These manipulators affect all further output to the stream

int num {255}
std::cout << std::showbase; // std::noshowbase;
std::cout << std::uppercase;
std::cout << std::showpos; // std::noshowpos;
std::cout << std::dec << num << std::endl;
std::cout << std::hex << num << std::endl;
std::cout << std::oct << num << std::endl;

Setting/resetting integer types
Set using setf
std::cout.setf(std::ios::showbase);
std::cout.setf(std::ios::ippercase);
std::cout.setf(std::ios::showpos);

Reset to defaults
std::cout << std::resetiosflags(std::ios::basefield);
std::cout << std::resetiosflags(std::ios::showbae);
std::cout << std::resetiosflags(std::ios::showpos);
std::cout << std::resetiosflags(std::ios::uppercase);

Formatting floating point types
Default when displaying floating point values is:
  setprecision - number of digits displayed (6)
  fixed - not fixed to a specific number of digits after the decimal point
  noshowpoint - trailing zeros are not displayed
  nouppercase - when displying in scientific notation
  noshowpos - no '+' is displyed for positive numbers

Formatting floating point types - precision
  double num {1234.5678};
  std::cout << num << std::endl;
  // will display
  1234.57 // Notice precision is 6 and rounding

  double num {123456789.987654321};
  std::cout << num << std::endl;
  // will display
  1.23457e+008 // Notice precision is 6

  double num {123456789.987654321};
  std::cout << std::setprecision(9);
  std::cout << num << std::endl;
  //will display
  123456790

  double num {123456789.987654321};
  std::cout << std::fixed;
  std::cout << num << std::endl;
  //will display precision 6 from the decimal
  123456789.987654

  double num {123456789.987654321};

  std::cout << num << std::end::endl;
  // will display precision 3 from the decimal
  123456789.988

  double num {123456789.987654321};
  std::cout << std::setprecision(3)
            << std::scientific;
  std::cout << num << std::endl;
  //will display precision 3
  1.23e+008

  double num {123456789.987654321};
  std::cout << std::setprecision(3)
            << std::scientific
            << std::uppercase;
  std::cout << num << std::endl;
  //will display precision 3
  1.23E+008

  double num {123456789.987654321};
  std::cout << std::setprecision(3)
            << fixed
            << std::showpos;
  std::cout << num << std::endl;
  //will display precision 3
  +1.23456789.988


  double num {12.34};
  std::cout << num << std::endl; // 12.34
  std::cout << std::showpoint;
  std::cout << num << std::endl; // 12.3400

Returning to general settings
unsetf
  std::cout.unsetf(std::ios::scientific | std::ios::fixed);
  or
  std::cout << std::resetiosflags(std::ios::floatfield);

Refer to the docs for other set/reset flags

Field width, align and fill 
  Default when dispalying floating point values is:
    setw - not set by default
    left - when no field width, right - when using field width
    fill - not set by default - blank space is used

  Some of these manipulators affect only the next data element put on the
  stream

  Default:
    double num {1234.5678};
    std::string hello{"Hello"};

    std::cout << num << std::endl;
    std::cout << hello << std::endl;
    // will display
    1234.57
    Hello

  Field width - setw
    double num {1234.5678};
    std::string hello {"Hello"};
    std::cout << std::setw(10) << num
              << hello << std::endl;
    // will display
    1234.57Hello

    double num {1234.5678};
    std::string hello{"Hello"};

    std::cout << std::setw(10) << num
              << std::setw(10) << hello
              << std::set(10) << hello << std::endl;
    // will display
    1234.57     Hello     Hello

    double num{1234.5678};
    std::string hello{"Hello"};
    std::cout << std::setw(10)
              << std::left
              << num // only affects num!
              << hello << std::endl;
     // will display
     1234.57    Hello

    double num {1234.5678} ;
    std::string hello{"Hello"};
    std::cout << std::setw(10) << num
              << std::setw(10) << std::right << hello
              << std::setw(15) << std::right << hello
              << std::endl;
     // Will display
     1234.57      Hello         Hello

    double num {1234.5678} ;
    std::string hello{"Hello"};

    std::cout << std::setfill('-');
    std::cout << std::setw(10) << num
    << hello << std::endl;

    // will display
    ---1234.57Hello
